Problem:
-> Given infinite supply of denominations.
-> Find minimum number of coins/notes to make change for a given value V.

Solution:
-> Sort the array of denominations (usually sorted).
-> Take how much of which denominations need in descending order.

Complexity:
-> Time: O(n) / {O(nlogn) if sorting in needed}
-> Space: O(n)

***
A Canonical Coin System is a type of coin system
where the greedy algorithm always produces the optimal solution for the coin change problem.
In simpler terms, when using the greedy approach (picking the highest denomination first),
it always results in the fewest number of coins needed to make a given amount.

Example of a Canonical Coin System
Consider the standard U.S. coin system:
Denominations: {1, 5, 10, 25}
For any amount, the greedy algorithm gives the optimal solution.

Example:
To make 30 cents, the greedy approach picks:

1 × 25-cent coin
1 × 5-cent coin
Total: 2 coins (which is the minimum possible).
Example of a Non-Canonical Coin System
Consider denominations {1, 3, 4}. The greedy algorithm fails for some values.

Example:
To make 6, the greedy approach picks:

1 × 4
2 × 1
Total: 3 coins
But the optimal solution is:

2 × 3 (only 2 coins)
So, this system is not canonical.
***